name: terraform-gcp
on:
  workflow_call:
    inputs:
      working_directory:
        type: string
        required: false
        default: "."
      project:
        type: string
        required: true
      workload_identity_provider:
        type: string
        required: true
      service_account:
        type: string
        required: true
      runs-on: # https://zenn.dev/shunsuke_suzuki/scraps/0407b843e58451
        required: false
        type: string
        default: '"ubuntu-latest"'
        description: |
          JSON string for runs-on.
          e.g.
          runs-on: '"macos-latest"'
          runs-on: '["foo"]'

concurrency:
  group: ${{ inputs.project }}
  cancel-in-progress: false

jobs:
  terraform:
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ${{fromJSON(inputs.runs-on)}}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4

      - name: install aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.29.0

      - name: install tfcmt via aqua
        run: |
          if [ -f aqua.yaml ];then
            aqua i
          else
            aqua g -i suzuki-shunsuke/tfcmt
          fi

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: set-tf-version
        id: set-tf-version
        run: |
          echo "terraform_version=$(cat .terraform-version)" >> $GITHUB_OUTPUT

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.set-tf-version.outputs.terraform_version }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name != 'push' || github.ref_name != 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: tfcmt -var "target:${{ inputs.project }}" plan -patch -- terraform plan -no-color

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref_name == 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: tfcmt -var "target:${{ inputs.project }}" apply -- terraform apply -no-color -auto-approve -input=false
