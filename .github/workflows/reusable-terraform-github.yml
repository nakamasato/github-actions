name: terraform-github
on:
  workflow_call:
    inputs:
      enable_aqua_cache:
        type: boolean
        required: false
        default: false
      working_directory:
        type: string
        required: false
        default: "."
      project:
        type: string
        required: false
        default: "github"
      # GCP config: currently only support GCS backend
      workload_identity_provider:
        type: string
        required: false
      service_account:
        type: string
        required: false
      terraform_version_file:
        type: string
        required: false
        default: ".terraform-version" # use 'latest' if not exists
      save_tfplan:
        type: boolean
        required: false
        default: false
      tfplan_retention_days:
        type: number
        required: false
        default: 1
    outputs:
      tfplan_artifact_name:
        description: "Name of the artifact containing terraform plan JSON"
        value: ${{ jobs.terraform.outputs.tfplan_artifact_name }}
    secrets:
      # GitHub App
      gh_app_id:
        required: true
      gh_private_key:
        required: true

concurrency:
  group: terraform-github-${{ inputs.project }}
  cancel-in-progress: false

jobs:
  terraform:
    permissions:
      issues: write # allow to create repo label
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      tfplan_artifact_name: ${{ steps.plan.outputs.tfplan_artifact_name }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Generate GitHub App Token
        id: github-app-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.gh_app_id }}
          private-key: ${{ secrets.gh_private_key }}
          owner: ${{ github.repository_owner }}

      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        if: inputs.enable_aqua_cache
        with:
          path: ~/.local/share/aquaproj-aqua
          key: v2-aqua-installer-${{runner.os}}-${{runner.arch}}-${{hashFiles('aqua.yaml')}}
          restore-keys: |
            v2-aqua-installer-${{runner.os}}-${{runner.arch}}-

      - name: install aqua
        uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f # v4.0.2
        with:
          aqua_version: v2.51.2

      - name: install tfcmt via aqua
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          if [ ! -f aqua.yaml ];then
            aqua init
            aqua g -i suzuki-shunsuke/tfcmt
          fi
          aqua i

      # For GCS bucket backend
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@c200f3691d83b41bf9bbd8638997a462592937ed # v2.1.13
        with:
          create_credentials_file: 'true'
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: set-tf-version
        id: set-tf-version
        working-directory: .
        run: |
          version_file="${{ inputs.terraform_version_file }}"
          if [ -f "$version_file" ]; then
            version=$(cat "$version_file")
          else
            version="latest"
          fi
          echo "terraform_version=$version" >> "$GITHUB_OUTPUT"

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.set-tf-version.outputs.terraform_version }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name != 'push' || github.ref_name != 'main'
        env:
          # https://github.com/suzuki-shunsuke/tfcmt/blob/6cb66ca833829e713563b928f0b99f1401dd6677/pkg/notifier/github/client.go#L71-L79
          TFCMT_GITHUB_TOKEN: ${{ secrets.github_token }} # For tfcmt (permissions are set above)
          GITHUB_TOKEN: ${{ steps.github-app-token.outputs.token }} # For github provider (permissions are set for the GitHub app)
        run: |
          tfcmt -var "target:${{ inputs.project }}" plan -patch -- terraform plan -no-color -out=tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
          if [ "${{ inputs.save_tfplan }}" = "true" ]; then
            artifact_name="tfplan-${{ github.workflow }}-${{ inputs.project }}-${{ github.run_id }}"
            echo "tfplan_artifact_name=$artifact_name" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Terraform Plan Artifact
        if: inputs.save_tfplan && (github.event_name != 'push' || github.ref_name != 'main')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: tfplan-${{ github.workflow }}-${{ inputs.project }}-${{ github.run_id }}
          path: ${{ inputs.working_directory }}/tfplan.json
          retention-days: ${{ inputs.tfplan_retention_days }}

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref_name == 'main'
        env:
          # https://github.com/suzuki-shunsuke/tfcmt/blob/6cb66ca833829e713563b928f0b99f1401dd6677/pkg/notifier/github/client.go#L71-L79
          TFCMT_GITHUB_TOKEN: ${{ secrets.github_token }} # For tfcmt (permissions are set above)
          GITHUB_TOKEN: ${{ steps.github-app-token.outputs.token }} # For github provider (permissions are set for the GitHub app)
        run: tfcmt -var "target:${{ inputs.project }}" apply -- terraform apply -no-color -auto-approve -input=false
