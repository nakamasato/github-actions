name: 'Cloud Run Traffic Tag Cleanup'
description: 'Clean up Cloud Run traffic tags for PR deployments and update PR comments'
author: 'nakamasato'

inputs:
  service:
    description: 'Cloud Run service name'
    required: true
  region:
    description: 'Google Cloud region'
    required: true
  project_id:
    description: 'Google Cloud project ID'
    required: true
  tag:
    description: 'Traffic tag to remove (e.g., pr-123)'
    required: true
  github_token:
    description: 'GitHub token for PR comments'
    required: false
    default: ${{ github.token }}
  pr_comment_marker:
    description: 'HTML comment marker to identify PR comments for updates'
    required: false
    default: 'deploy-cloudrun-comment'

runs:
  using: 'composite'
  steps:
    - name: Cleanup Cloud Run traffic tag
      id: cleanup
      shell: bash
      run: |
        echo "üßπ Cleaning up traffic tag: ${{ inputs.tag }}..."

        TAG="${{ inputs.tag }}"
        SERVICE_NAME="${{ inputs.service }}"
        CLEANUP_SUCCESS="false"
        CLEANUP_MESSAGE=""

        # Check if tag exists and remove it
        if gcloud run services describe "$SERVICE_NAME" \
          --project "${{ inputs.project_id }}" \
          --region "${{ inputs.region }}" \
          --format json | jq -e ".spec.traffic[] | select(.tag==\"${TAG}\")" > /dev/null 2>&1; then

          echo "üè∑Ô∏è Tag ${TAG} found. Removing..."

          if gcloud run services update-traffic "$SERVICE_NAME" \
            --project "${{ inputs.project_id }}" \
            --region "${{ inputs.region }}" \
            --remove-tags "${TAG}" 2>/dev/null; then

            CLEANUP_SUCCESS="true"
            CLEANUP_MESSAGE="‚úÖ Successfully removed tag '${TAG}'"
            echo "$CLEANUP_MESSAGE"
          else
            CLEANUP_MESSAGE="‚ùå Failed to remove tag '${TAG}'"
            echo "$CLEANUP_MESSAGE"
          fi
        else
          CLEANUP_SUCCESS="true"
          CLEANUP_MESSAGE="‚ÑπÔ∏è Tag ${TAG} not found (already cleaned up)"
          echo "$CLEANUP_MESSAGE"
        fi

        echo "CLEANUP_SUCCESS=$CLEANUP_SUCCESS" >> "$GITHUB_OUTPUT"
        echo "CLEANUP_MESSAGE=$CLEANUP_MESSAGE" >> "$GITHUB_OUTPUT"
        echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
        echo "SERVICE_NAME=$SERVICE_NAME" >> "$GITHUB_OUTPUT"

    - name: Update PR comment with cleanup status
      if: inputs.github_token != '' && github.event_name == 'pull_request'
      uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const commentMarker = '<!-- ${{ inputs.pr_comment_marker }} -->';
          const prNumber = ${{ github.event.number }};
          const cleanupSuccess = '${{ steps.cleanup.outputs.CLEANUP_SUCCESS }}' === 'true';
          const cleanupMessage = '${{ steps.cleanup.outputs.CLEANUP_MESSAGE }}';
          const tag = '${{ steps.cleanup.outputs.TAG }}';
          const serviceName = '${{ steps.cleanup.outputs.SERVICE_NAME }}';
          const region = '${{ inputs.region }}';
          const projectId = '${{ inputs.project_id }}';

          const cleanupComment = `${commentMarker}
          ## üßπ Cloud Run Deployment Cleanup

          The preview deployment for this PR has been cleaned up.

          **Status:** ${cleanupSuccess ? '‚úÖ Success' : '‚ùå Failed'}
          **Service:** ${serviceName}
          **Region:** ${region}
          **Tag:** ${tag}

          ${cleanupMessage}

          ${cleanupSuccess ?
            '> üîí The preview URL is no longer accessible.' :
            '> ‚ö†Ô∏è Manual cleanup may be required. Please check the Cloud Run console.'
          }

          <details>
          <summary>üîó Cleanup Details</summary>

          | Property | Value |
          |----------|-------|
          | **PR Number** | #${prNumber} |
          | **Service** | ${serviceName} |
          | **Region** | ${region} |
          | **Project ID** | ${projectId} |
          | **Tag Removed** | ${tag} |
          | **Cleanup Status** | ${cleanupSuccess ? 'Success' : 'Failed'} |

          ${cleanupSuccess ? '' : `
          **Troubleshooting:**
          - Check if you have sufficient permissions
          - Verify the service exists in the specified region
          - Manual cleanup: [Cloud Run Console](https://console.cloud.google.com/run/detail/${region}/${serviceName}?project=${projectId})
          `}

          </details>

          ---
          *Cleanup completed: ${new Date().toISOString()}*`;

          // Try to find and update existing comment first
          try {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.body && comment.body.includes(commentMarker)
            );

            if (existingComment) {
              // Update existing comment with cleanup status
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: cleanupComment
              });
              console.log('Updated existing PR comment with cleanup status');
            } else {
              // Create new cleanup comment if no existing comment found
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: cleanupComment
              });
              console.log('Created new cleanup comment');
            }
          } catch (error) {
            console.error('Failed to update PR comment:', error.message);
            // Don't fail the action if comment update fails
          }

    - name: Output cleanup summary
      shell: bash
      run: |
        echo "## üßπ Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| PR Number | #${{ steps.pr.outputs.PR_NUMBER }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Service | ${{ steps.cleanup.outputs.SERVICE_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ inputs.region }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tag | ${{ steps.cleanup.outputs.TAG }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ${{ steps.cleanup.outputs.CLEANUP_SUCCESS == 'true' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.cleanup.outputs.CLEANUP_MESSAGE }}" >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'trash-2'
  color: 'red'
