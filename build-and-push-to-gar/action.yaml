inputs:
  project:
    description: GCP project id
    required: true
  region:
    description: GCP region
    required: false
    default: asia-northeast1
  repository:
    description: GCP Artifact Registry repository
    required: false
    default: cloud-run-source-deploy
  image:
    description: image name
    required: true
  image_tag:
    description: image tag
    required: false
    default: latest
  workload_identity_provider:
    description: Workload Identity Provider
    required: true
  service_account:
    description: Service Account
    required: true
  dockerfile:
    description: "if you provide Dockerfile path, build with build-push-action. otherwise use buildpacks"
    default: 'Dockerfile'
    required: false
  context:
    description: "docker context for build-push-action"
    default: '.'
    required: false
  build-args:
    description: build-args for build-push-action
    default: ''
    required: false
  driver:
    description: driver for setup-buildx-action
    default: docker-container
    required: false
  cache_scope:
    description: cache scope for multiple images (defaults to image name)
    default: ''
    required: false
  use_registry_cache:
    description: enable registry cache fallback in addition to gha cache
    default: 'false'
    required: false
  cache_strategy:
    description: |
      Docker build cache strategy. Options:
      - auto: Auto-detect based on runner type (recommended)
      - gha: GitHub Actions cache (fast, 10GB limit, best for GitHub-hosted)
      - local: Local filesystem cache (best for self-hosted runners)
      - registry: GAR registry cache (persistent, good for multi-runner)
      - hybrid: GHA + Registry cache (balanced performance/persistence)
      - triple: Local + GHA + Registry (maximum performance, high-frequency builds)
    default: 'auto'
    required: false
  local_cache_path:
    description: 'Local cache directory path for self-hosted runners and triple strategy'
    default: '/tmp/.buildx-cache'
    required: false
  registry_cache_tag:
    description: 'Tag name for registry cache image in GAR (appended to image name)'
    default: 'buildcache'
    required: false

outputs:
  imageid:
    description: image name
    value: ${{ steps.build-push-action.outputs.imageid }}
  digest:
    description: image digest
    value: ${{ steps.build-push-action.outputs.digest }}
  metadata:
    description: image metadata
    value: ${{ steps.build-push-action.outputs.metadata }}
  full_image_name:
    value: ${{ inputs.region }}-docker.pkg.dev/${{ inputs.project }}/${{ inputs.repository }}/${{ inputs.image }}

name: Build and push to Google Artifact Registry
description: |
  Build and push Docker images to Google Artifact Registry with intelligent caching.
  Supports multiple cache strategies optimized for different runner types and use cases.
  Features 2025-compatible GitHub Actions Cache API v2 and auto-detection of optimal cache strategy.
runs:
  using: composite
  steps:
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@140bb5113ffb6b65a7e9b937a81fa96cf5064462 # v2.1.11
      with:
        token_format: access_token
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@6a7c903a70c8625ed6700fa299f5ddb4ca6022e9 # v2.1.5

    - name: Login to GAR
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ inputs.region }}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Detect runner type and set cache strategy
      id: cache-config
      shell: bash
      run: |
        # Detect runner type
        if [ "$RUNNER_ENVIRONMENT" = "github-hosted" ] || [[ "${{ runner.name }}" == "GitHub Actions"* ]]; then
          echo "runner_type=github-hosted" >> $GITHUB_OUTPUT
          RUNNER_TYPE="github-hosted"
        else
          echo "runner_type=self-hosted" >> $GITHUB_OUTPUT  
          RUNNER_TYPE="self-hosted"
        fi
        
        # Set cache strategy based on input or auto-detection
        STRATEGY="${{ inputs.cache_strategy }}"
        if [ "$STRATEGY" = "auto" ]; then
          if [ "$RUNNER_TYPE" = "github-hosted" ]; then
            if [ "${{ inputs.use_registry_cache }}" = "true" ]; then
              STRATEGY="hybrid"
            else
              STRATEGY="gha"
            fi
          else
            STRATEGY="local"
          fi
        fi
        echo "selected_strategy=$STRATEGY" >> $GITHUB_OUTPUT
        
        # Configure cache parameters
        SCOPE="${{ inputs.cache_scope || inputs.image }}"
        REG_REF="${{ inputs.region }}-docker.pkg.dev/${{ inputs.project }}/${{ inputs.repository }}/${{ inputs.image }}:${{ inputs.registry_cache_tag }}"
        LOCAL_PATH="${{ inputs.local_cache_path }}"
        
        # Set cache configurations based on strategy
        case "$STRATEGY" in
          "gha")
            echo "cache_from=type=gha,scope=$SCOPE" >> $GITHUB_OUTPUT
            echo "cache_to=type=gha,mode=max,scope=$SCOPE" >> $GITHUB_OUTPUT
            ;;
          "local")
            echo "cache_from=type=local,src=$LOCAL_PATH" >> $GITHUB_OUTPUT
            echo "cache_to=type=local,dest=$LOCAL_PATH,mode=max" >> $GITHUB_OUTPUT
            ;;
          "registry")
            echo "cache_from=type=registry,ref=$REG_REF" >> $GITHUB_OUTPUT
            echo "cache_to=type=registry,ref=$REG_REF,mode=max" >> $GITHUB_OUTPUT
            ;;
          "hybrid")
            # Multi-line cache configuration for hybrid strategy
            {
              echo 'cache_from<<EOF'
              echo "type=gha,scope=$SCOPE"
              echo "type=registry,ref=$REG_REF"
              echo 'EOF'
              echo 'cache_to<<EOF'
              echo "type=gha,mode=max,scope=$SCOPE"
              echo "type=registry,ref=$REG_REF,mode=max"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            ;;
          "triple")
            # Multi-line cache configuration for triple strategy
            {
              echo 'cache_from<<EOF'
              echo "type=local,src=$LOCAL_PATH"
              echo "type=gha,scope=$SCOPE"
              echo "type=registry,ref=$REG_REF"
              echo 'EOF'
              echo 'cache_to<<EOF'
              echo "type=local,dest=$LOCAL_PATH,mode=max"
              echo "type=gha,mode=max,scope=$SCOPE"
              echo "type=registry,ref=$REG_REF,mode=max"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            ;;
        esac
        
        echo "‚úÖ Selected cache strategy: $STRATEGY for $RUNNER_TYPE runner"

    - name: Setup local cache directory
      if: contains(steps.cache-config.outputs.selected_strategy, 'local') || steps.cache-config.outputs.selected_strategy == 'triple'
      shell: bash
      run: |
        mkdir -p ${{ inputs.local_cache_path }}
        echo "üìÅ Created local cache directory: ${{ inputs.local_cache_path }}"

    - name: Display cache configuration
      shell: bash
      run: |
        echo "üöÄ Cache Configuration Summary:"
        echo "Runner Type: ${{ steps.cache-config.outputs.runner_type }}"
        echo "Strategy: ${{ steps.cache-config.outputs.selected_strategy }}"
        echo "Cache From: ${{ steps.cache-config.outputs.cache_from }}"
        echo "Cache To: ${{ steps.cache-config.outputs.cache_to }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        driver: ${{ inputs.driver }}


    - name: Build and push image
      id: build-push-action
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ inputs.region }}-docker.pkg.dev/${{ inputs.project }}/${{ inputs.repository }}/${{ inputs.image }}:${{ inputs.image_tag }}
        platforms: linux/amd64
        cache-from: ${{ steps.cache-config.outputs.cache_from }}
        cache-to: ${{ steps.cache-config.outputs.cache_to }}
        build-args: ${{ inputs.build-args }}

