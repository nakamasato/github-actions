inputs:
  version:
    description: The version of poetry to install
    required: false
  python-version-file:
    description: Python version file passed to setup-python (e.g. .python-version, pyproject.toml)
    required: false
    default: ''
  python-version:
    description: Python version passed to setup-python
    required: false
    default: ''
  install-dependencies:
    description: boolean whether to run 'poetry install'
    required: false
    default: "true"
  working-directory:
    description: The directory to run the action in
    required: false
    default: '.'

name: Setup Poetry
description: install poetry

runs:
  using: composite
  steps:
    - id: setup-python
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ${{ inputs.working-directory }}/${{ inputs.python-version-file }}
        python-version: ${{ inputs.python-version }}

    - name: get poetry version from .tool-versions
      id: get-poetry-version
      shell: bash
      run: |
        if [ "${{ inputs.version }}" != "" ]; then
          echo "POETRY_VERSION=${{ inputs.version }}" >> "$GITHUB_OUTPUT"
        elif [ -f .tool-versions ]; then
          echo "POETRY_VERSION=$(grep poetry .tool-versions | sed -E 's/.*[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+)/\1/')" >> "$GITHUB_OUTPUT"
        else
          echo "POETRY_VERSION=latest" >> "$GITHUB_OUTPUT"
        fi

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ steps.get-poetry-version.outputs.POETRY_VERSION }}

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry (${{ steps.get-poetry-version.outputs.POETRY_VERSION }})
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{ steps.get-poetry-version.outputs.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        virtualenvs-path: .venv

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ steps.get-poetry-version.outputs.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' && inputs.install-dependencies == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        "$HOME/.local/bin/poetry" install --no-interaction --no-root

    #----------------------------------------------
    # install your root project, if required
    #----------------------------------------------
    - name: Install project
      if: inputs.install-dependencies == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        ls ~/.local/bin
        "$HOME/.local/bin/poetry" install --no-interaction
