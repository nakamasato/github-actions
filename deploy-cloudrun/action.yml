name: 'Enhanced Cloud Run Deploy'
description: 'Deploy to Google Cloud Run with advanced PR and traffic management features'
author: 'nakamasato'

inputs:
  # Inputs passed through to google-github-actions/deploy-cloudrun@v2
  service:
    description: 'Cloud Run service name'
    required: true
  image:
    description: 'Container image URL'
    required: true
  source:
    description: 'Path to source code for deployment'
    required: false
  suffix:
    description: 'Revision name suffix'
    required: false
  env_vars:
    description: 'Environment variables in KEY=VALUE format (one per line)'
    required: false
  env_vars_update_strategy:
    description: 'Strategy for updating environment variables'
    required: false
    default: 'merge'
  secrets:
    description: 'Secrets in KEY=SECRET_NAME format (one per line)'
    required: false
  secrets_update_strategy:
    description: 'Strategy for updating secrets'
    required: false
    default: 'merge'
  labels:
    description: 'Service labels'
    required: false
  skip_default_labels:
    description: 'Skip automatic GitHub Actions labels'
    required: false
    default: 'false'
  tag:
    description: 'Traffic tag for the revision'
    required: false
  timeout:
    description: 'Maximum request execution time'
    required: false
  flags:
    description: 'Additional Cloud Run deployment flags'
    required: false
  no_traffic:
    description: 'Deploy with no traffic allocation'
    required: false
    default: ${{ github.event_name == 'pull_request' }}
  revision_traffic:
    description: 'Traffic allocation for the deployed revision'
    required: false
    default: ${{ github.event_name != 'pull_request' && 'LATEST=100' || '' }}
  tag_traffic:
    description: 'Tag traffic assignments'
    required: false
  project_id:
    description: 'Google Cloud project ID'
    required: true
  region:
    description: 'Google Cloud region'
    required: true
  gcloud_version:
    description: 'Cloud SDK version'
    required: false
  gcloud_component:
    description: 'Cloud SDK components to install'
    required: false

  # Additional inputs specific to this action
  environment:
    description: 'Deployment environment (dev, staging, prod)'
    required: false
    default: 'dev'
  github_token:
    description: 'GitHub token for PR comments (required for PR deployments)'
    required: false
    default: ${{ github.token }}

outputs:
  url:
    description: 'Service URL'
    value: ${{ steps.deploy.outputs.url }}
  revision:
    description: 'Deployed revision name'
    value: ${{ steps.deploy.outputs.revision }}
  pr_url:
    description: 'PR-specific URL (only for PR deployments)'
    value: ${{ steps.set-outputs.outputs.pr_url }}

runs:
  using: 'composite'
  steps:
    - name: Determine deployment strategy
      id: strategy
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "DEPLOYMENT_TYPE=pr" >> "$GITHUB_OUTPUT"
          echo "SERVICE_SUFFIX=-${{ inputs.environment }}" >> "$GITHUB_OUTPUT"
          echo "TAG=pr-${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
        else
          echo "DEPLOYMENT_TYPE=main" >> "$GITHUB_OUTPUT"
          echo "SERVICE_SUFFIX=-${{ inputs.environment }}" >> "$GITHUB_OUTPUT"
          echo "TAG=" >> "$GITHUB_OUTPUT"
        fi

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v3
      with:
        service: ${{ inputs.service }}${{ steps.strategy.outputs.SERVICE_SUFFIX }}
        image: ${{ inputs.image }}
        source: ${{ inputs.source }}
        suffix: ${{ inputs.suffix }}
        env_vars: ${{ inputs.env_vars }}
        env_vars_update_strategy: ${{ inputs.env_vars_update_strategy }}
        secrets: ${{ inputs.secrets }}
        secrets_update_strategy: ${{ inputs.secrets_update_strategy }}
        labels: ${{ inputs.labels }}
        skip_default_labels: ${{ inputs.skip_default_labels }}
        tag: ${{ steps.strategy.outputs.TAG }}
        timeout: ${{ inputs.timeout }}
        flags: ${{ inputs.flags }}
        no_traffic: ${{ inputs.no_traffic }}
        revision_traffic: ${{ inputs.revision_traffic }}
        tag_traffic: ${{ inputs.tag_traffic }}
        project_id: ${{ inputs.project_id }}
        region: ${{ inputs.region }}
        gcloud_version: ${{ inputs.gcloud_version }}
        gcloud_component: ${{ inputs.gcloud_component }}

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        if [ "${{ steps.strategy.outputs.DEPLOYMENT_TYPE }}" = "pr" ]; then
          BASE_URL=$(echo "${{ steps.deploy.outputs.url }}" | sed 's|https://||')
          TAGGED_URL="https://${{ steps.strategy.outputs.TAG }}---${BASE_URL}"
          echo "pr_url=$TAGGED_URL" >> "$GITHUB_OUTPUT"
        else
          echo "pr_url=" >> "$GITHUB_OUTPUT"
        fi

    - name: Comment on PR (create or update)
      if: steps.strategy.outputs.DEPLOYMENT_TYPE == 'pr' && inputs.github_token != ''
      uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const commentMarker = '<!-- deploy-cloudrun-comment -->';
          const prUrl = '${{ steps.set-outputs.outputs.pr_url }}';
          const serviceUrl = '${{ steps.deploy.outputs.url }}';
          const revision = '${{ steps.deploy.outputs.revision }}';
          const environment = '${{ inputs.environment }}';
          const tag = '${{ steps.strategy.outputs.TAG }}';
          const service = '${{ inputs.service }}${{ steps.strategy.outputs.SERVICE_SUFFIX }}';
          const region = '${{ inputs.region }}';
          const image = '${{ inputs.image }}';

          const comment = `${commentMarker}
          ## üöÄ Cloud Run Deployment Preview

          Your PR has been deployed to Cloud Run!

          **üåê Preview URL:** ${prUrl}
          **üìç Environment:** ${environment}
          **üè∑Ô∏è Revision:** ${revision}

          > ‚ö†Ô∏è This deployment receives **0% traffic** and is only accessible via the preview URL above.

          <details>
          <summary>üìã Deployment Details</summary>

          | Property | Value |
          |----------|-------|
          | **Service** | ${service} |
          | **Region** | ${region} |
          | **Tag** | ${tag} |
          | **Image** | ${image} |
          | **Service URL** | ${serviceUrl} |
          | **Traffic Allocation** | 0% (tagged deployment) |

          </details>

          <details>
          <summary>üîó Useful Links</summary>

          - [Cloud Run Console](https://console.cloud.google.com/run/detail/${region}/${service}?project=${{ inputs.project_id }})
          - [Service Logs](https://console.cloud.google.com/logs/query;query=resource.type%3D%22cloud_run_revision%22%0Aresource.labels.service_name%3D%22${service}%22?project=${{ inputs.project_id }})

          </details>

          ---
          *Last updated: ${new Date().toISOString()}*`;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(comment =>
            comment.body && comment.body.includes(commentMarker)
          );

          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
            console.log('Updated existing PR comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            console.log('Created new PR comment');
          }

    - name: Output deployment summary
      shell: bash
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Service | ${{ inputs.service }}${{ steps.strategy.outputs.SERVICE_SUFFIX }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ inputs.region }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment Type | ${{ steps.strategy.outputs.DEPLOYMENT_TYPE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | ${{ inputs.image }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Service URL | ${{ steps.deploy.outputs.url }} |" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.strategy.outputs.DEPLOYMENT_TYPE }}" = "pr" ]; then
          echo "| PR URL | ${{ steps.set-outputs.outputs.pr_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Traffic Allocation | 0% (tagged as ${{ steps.strategy.outputs.TAG }}) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Traffic Allocation | 100% |" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'cloud'
  color: 'blue'
